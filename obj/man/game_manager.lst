ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.
Hexadecimal [16-Bits]



                              1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              2 ;;    Coin Jump: a videogame developed for Amstrad CPC 464.                            ;;
                              3 ;;    Copyright (C) 2022  Senén Martínez Acame & Sergio Tortajada Santonja             ;;
                              4 ;;                                                                                     ;;
                              5 ;;    This program is free software: you can redistribute it and/or modify             ;;
                              6 ;;    it under the terms of the GNU General Public License as published by             ;;
                              7 ;;    the Free Software Foundation, either version 3 of the License, or                ;;
                              8 ;;    (at your option) any later version.                                              ;;
                              9 ;;                                                                                     ;;
                             10 ;;    This program is distributed in the hope that it will be useful,                  ;;
                             11 ;;    but WITHOUT ANY WARRANTY; without even the implied warranty of                   ;;
                             12 ;;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                    ;;
                             13 ;;    GNU General Public License for more details.                                     ;;
                             14 ;;                                                                                     ;;
                             15 ;;    You should have received a copy of the GNU General Public License                ;;
                             16 ;;    along with this program.  If not, see <http://www.gnu.org/licenses/>.            ;;
                             17 ;;                                                                                     ;;
                             18 ;;    Coin Jump  Copyright (C) 2022  Senén Martínez Acame & Sergio Tortajada Santonja  ;;
                             19 ;;                                                                                     ;;
                             20 ;;    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.       ;;
                             21 ;;    This is free software, and you are welcome to redistribute it                    ;;
                             22 ;;    under certain conditions; type `show c' for details.                             ;;
                             23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.
Hexadecimal [16-Bits]



                             25 .include "assets/assets.h.s"
                              1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              2 ;;    Coin Jump: a videogame developed for Amstrad CPC 464.                            ;;
                              3 ;;    Copyright (C) 2022  Senén Martínez Acame & Sergio Tortajada Santonja             ;;
                              4 ;;                                                                                     ;;
                              5 ;;    This program is free software: you can redistribute it and/or modify             ;;
                              6 ;;    it under the terms of the GNU General Public License as published by             ;;
                              7 ;;    the Free Software Foundation, either version 3 of the License, or                ;;
                              8 ;;    (at your option) any later version.                                              ;;
                              9 ;;                                                                                     ;;
                             10 ;;    This program is distributed in the hope that it will be useful,                  ;;
                             11 ;;    but WITHOUT ANY WARRANTY; without even the implied warranty of                   ;;
                             12 ;;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                    ;;
                             13 ;;    GNU General Public License for more details.                                     ;;
                             14 ;;                                                                                     ;;
                             15 ;;    You should have received a copy of the GNU General Public License                ;;
                             16 ;;    along with this program.  If not, see <http://www.gnu.org/licenses/>.            ;;
                             17 ;;                                                                                     ;;
                             18 ;;    Coin Jump  Copyright (C) 2022  Senén Martínez Acame & Sergio Tortajada Santonja  ;;
                             19 ;;                                                                                     ;;
                             20 ;;    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.       ;;
                             21 ;;    This is free software, and you are welcome to redistribute it                    ;;
                             22 ;;    under certain conditions; type `show c' for details.                             ;;
                             23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             24 
                             25 ;;  Includes
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.
Hexadecimal [16-Bits]



                             26 .include "assets/maps/intro.h.s"
                              1 ;;
                              2 ;; File assets/maps/intro.tmx converted to csv using cpct_tmx2data [Sat Jan 28 11:50:13 2023]
                              3 ;;   * Visible Layers:  1
                              4 ;;   * Layer Width:     20
                              5 ;;   * Layer Height:    25
                              6 ;;   * Bits per tile:   8
                              7 ;;   * Layer Bytes:     500 (20 x 25 items, 8 bits per item)
                              8 ;;   * Total Bytes:     500 (500 x 1, bytes per layer times layers)
                              9 ;;
                             10 ;;#### Width and height constants ####
                     0014    11 _intro_W = 20
                     0019    12 _intro_H = 25
                             13 
                             14 ;;#### Converted layer tilemaps ####
                             15 ;;   Visible layers: 1
                             16 ;;
                             17 .globl _intro
                     01F4    18 _intro_SIZE = 500
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.
Hexadecimal [16-Bits]



                             27 .include "assets/maps/mapa_00.h.s"
                              1 ;;
                              2 ;; File assets/maps/mapa_00.tmx converted to csv using cpct_tmx2data [Sat Jan 28 11:50:13 2023]
                              3 ;;   * Visible Layers:  1
                              4 ;;   * Layer Width:     20
                              5 ;;   * Layer Height:    25
                              6 ;;   * Bits per tile:   8
                              7 ;;   * Layer Bytes:     500 (20 x 25 items, 8 bits per item)
                              8 ;;   * Total Bytes:     500 (500 x 1, bytes per layer times layers)
                              9 ;;
                             10 ;;#### Width and height constants ####
                     0014    11 _level0_W = 20
                     0019    12 _level0_H = 25
                             13 
                             14 ;;#### Converted layer tilemaps ####
                             15 ;;   Visible layers: 1
                             16 ;;
                             17 .globl _level0
                     01F4    18 _level0_SIZE = 500
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.
Hexadecimal [16-Bits]



                             28 .include "assets/maps/mapa_01.h.s"
                              1 ;;
                              2 ;; File assets/maps/mapa_01.tmx converted to csv using cpct_tmx2data [Sat Jan 28 11:50:13 2023]
                              3 ;;   * Visible Layers:  1
                              4 ;;   * Layer Width:     20
                              5 ;;   * Layer Height:    25
                              6 ;;   * Bits per tile:   8
                              7 ;;   * Layer Bytes:     500 (20 x 25 items, 8 bits per item)
                              8 ;;   * Total Bytes:     500 (500 x 1, bytes per layer times layers)
                              9 ;;
                             10 ;;#### Width and height constants ####
                     0014    11 _level1_W = 20
                     0019    12 _level1_H = 25
                             13 
                             14 ;;#### Converted layer tilemaps ####
                             15 ;;   Visible layers: 1
                             16 ;;
                             17 .globl _level1
                     01F4    18 _level1_SIZE = 500
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.
Hexadecimal [16-Bits]



                             29 .include "assets/maps/mapa_02.h.s"
                              1 ;;
                              2 ;; File assets/maps/mapa_02.tmx converted to csv using cpct_tmx2data [Sat Jan 28 11:50:12 2023]
                              3 ;;   * Visible Layers:  1
                              4 ;;   * Layer Width:     20
                              5 ;;   * Layer Height:    25
                              6 ;;   * Bits per tile:   8
                              7 ;;   * Layer Bytes:     500 (20 x 25 items, 8 bits per item)
                              8 ;;   * Total Bytes:     500 (500 x 1, bytes per layer times layers)
                              9 ;;
                             10 ;;#### Width and height constants ####
                     0014    11 _level2_W = 20
                     0019    12 _level2_H = 25
                             13 
                             14 ;;#### Converted layer tilemaps ####
                             15 ;;   Visible layers: 1
                             16 ;;
                             17 .globl _level2
                     01F4    18 _level2_SIZE = 500
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 7.
Hexadecimal [16-Bits]



                             30 .include "assets/maps/mapa_03.h.s"
                              1 ;;
                              2 ;; File assets/maps/mapa_03.tmx converted to csv using cpct_tmx2data [Sat Jan 28 11:50:12 2023]
                              3 ;;   * Visible Layers:  1
                              4 ;;   * Layer Width:     20
                              5 ;;   * Layer Height:    25
                              6 ;;   * Bits per tile:   8
                              7 ;;   * Layer Bytes:     500 (20 x 25 items, 8 bits per item)
                              8 ;;   * Total Bytes:     500 (500 x 1, bytes per layer times layers)
                              9 ;;
                             10 ;;#### Width and height constants ####
                     0014    11 _level3_W = 20
                     0019    12 _level3_H = 25
                             13 
                             14 ;;#### Converted layer tilemaps ####
                             15 ;;   Visible layers: 1
                             16 ;;
                             17 .globl _level3
                     01F4    18 _level3_SIZE = 500
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 8.
Hexadecimal [16-Bits]



                             31 .include "assets/maps/mapa_@MT_Studios_UA.h.s"
                              1 ;;
                              2 ;; File assets/maps/mapa_@MT_Studios_UA.tmx converted to csv using cpct_tmx2data [Sat Jan 28 11:50:12 2023]
                              3 ;;   * Visible Layers:  1
                              4 ;;   * Layer Width:     20
                              5 ;;   * Layer Height:    25
                              6 ;;   * Bits per tile:   8
                              7 ;;   * Layer Bytes:     500 (20 x 25 items, 8 bits per item)
                              8 ;;   * Total Bytes:     500 (500 x 1, bytes per layer times layers)
                              9 ;;
                             10 ;;#### Width and height constants ####
                     0014    11 _level_MT_Studios_UA_W = 20
                     0019    12 _level_MT_Studios_UA_H = 25
                             13 
                             14 ;;#### Converted layer tilemaps ####
                             15 ;;   Visible layers: 1
                             16 ;;
                             17 .globl _level_MT_Studios_UA
                     01F4    18 _level_MT_Studios_UA_SIZE = 500
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 9.
Hexadecimal [16-Bits]



                             32 .include "assets/maps/mapa0_@Ianixaa.h.s"
                              1 ;;
                              2 ;; File assets/maps/mapa0_@Ianixaa.tmx converted to csv using cpct_tmx2data [Sat Jan 28 11:50:11 2023]
                              3 ;;   * Visible Layers:  1
                              4 ;;   * Layer Width:     20
                              5 ;;   * Layer Height:    25
                              6 ;;   * Bits per tile:   8
                              7 ;;   * Layer Bytes:     500 (20 x 25 items, 8 bits per item)
                              8 ;;   * Total Bytes:     500 (500 x 1, bytes per layer times layers)
                              9 ;;
                             10 ;;#### Width and height constants ####
                     0014    11 _level0_Ianixaa_W = 20
                     0019    12 _level0_Ianixaa_H = 25
                             13 
                             14 ;;#### Converted layer tilemaps ####
                             15 ;;   Visible layers: 1
                             16 ;;
                             17 .globl _level0_Ianixaa
                     01F4    18 _level0_Ianixaa_SIZE = 500
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 10.
Hexadecimal [16-Bits]



                             33 .include "assets/maps/mapa1_@Ianixaa.h.s"
                              1 ;;
                              2 ;; File assets/maps/mapa1_@Ianixaa.tmx converted to csv using cpct_tmx2data [Sat Jan 28 11:50:11 2023]
                              3 ;;   * Visible Layers:  1
                              4 ;;   * Layer Width:     20
                              5 ;;   * Layer Height:    25
                              6 ;;   * Bits per tile:   8
                              7 ;;   * Layer Bytes:     500 (20 x 25 items, 8 bits per item)
                              8 ;;   * Total Bytes:     500 (500 x 1, bytes per layer times layers)
                              9 ;;
                             10 ;;#### Width and height constants ####
                     0014    11 _level1_Ianixaa_W = 20
                     0019    12 _level1_Ianixaa_H = 25
                             13 
                             14 ;;#### Converted layer tilemaps ####
                             15 ;;   Visible layers: 1
                             16 ;;
                             17 .globl _level1_Ianixaa
                     01F4    18 _level1_Ianixaa_SIZE = 500
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 11.
Hexadecimal [16-Bits]



                             34 .include "assets/maps/mapa_@Spicyboat_Studio.h.s"
                              1 ;;
                              2 ;; File assets/maps/mapa_@Spicyboat_Studio.tmx converted to csv using cpct_tmx2data [Sat Jan 28 11:50:11 2023]
                              3 ;;   * Visible Layers:  1
                              4 ;;   * Layer Width:     20
                              5 ;;   * Layer Height:    25
                              6 ;;   * Bits per tile:   8
                              7 ;;   * Layer Bytes:     500 (20 x 25 items, 8 bits per item)
                              8 ;;   * Total Bytes:     500 (500 x 1, bytes per layer times layers)
                              9 ;;
                             10 ;;#### Width and height constants ####
                     0014    11 _level_Spicyboat_Studio_W = 20
                     0019    12 _level_Spicyboat_Studio_H = 25
                             13 
                             14 ;;#### Converted layer tilemaps ####
                             15 ;;   Visible layers: 1
                             16 ;;
                             17 .globl _level_Spicyboat_Studio
                     01F4    18 _level_Spicyboat_Studio_SIZE = 500
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 12.
Hexadecimal [16-Bits]



                             35 .include "assets/maps/mapa_@rnd_project22.h.s"
                              1 ;;
                              2 ;; File assets/maps/mapa_@rnd_project22.tmx converted to csv using cpct_tmx2data [Sat Jan 28 11:50:10 2023]
                              3 ;;   * Visible Layers:  1
                              4 ;;   * Layer Width:     20
                              5 ;;   * Layer Height:    25
                              6 ;;   * Bits per tile:   8
                              7 ;;   * Layer Bytes:     500 (20 x 25 items, 8 bits per item)
                              8 ;;   * Total Bytes:     500 (500 x 1, bytes per layer times layers)
                              9 ;;
                             10 ;;#### Width and height constants ####
                     0014    11 _level_rnd_project22_W = 20
                     0019    12 _level_rnd_project22_H = 25
                             13 
                             14 ;;#### Converted layer tilemaps ####
                             15 ;;   Visible layers: 1
                             16 ;;
                             17 .globl _level_rnd_project22
                     01F4    18 _level_rnd_project22_SIZE = 500
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 13.
Hexadecimal [16-Bits]



                             36 .include "assets/maps/mapa_@Tomateixon.h.s"
                              1 ;;
                              2 ;; File assets/maps/mapa_@Tomateixon.tmx converted to csv using cpct_tmx2data [Sat Jan 28 11:50:09 2023]
                              3 ;;   * Visible Layers:  1
                              4 ;;   * Layer Width:     20
                              5 ;;   * Layer Height:    25
                              6 ;;   * Bits per tile:   8
                              7 ;;   * Layer Bytes:     500 (20 x 25 items, 8 bits per item)
                              8 ;;   * Total Bytes:     500 (500 x 1, bytes per layer times layers)
                              9 ;;
                             10 ;;#### Width and height constants ####
                     0014    11 _level_Tomateixon_W = 20
                     0019    12 _level_Tomateixon_H = 25
                             13 
                             14 ;;#### Converted layer tilemaps ####
                             15 ;;   Visible layers: 1
                             16 ;;
                             17 .globl _level_Tomateixon
                     01F4    18 _level_Tomateixon_SIZE = 500
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 14.
Hexadecimal [16-Bits]



                             37 .include "assets/maps/fin.h.s"
                              1 ;;
                              2 ;; File assets/maps/fin.tmx converted to csv using cpct_tmx2data [Sat Jan 28 11:50:09 2023]
                              3 ;;   * Visible Layers:  1
                              4 ;;   * Layer Width:     20
                              5 ;;   * Layer Height:    25
                              6 ;;   * Bits per tile:   8
                              7 ;;   * Layer Bytes:     500 (20 x 25 items, 8 bits per item)
                              8 ;;   * Total Bytes:     500 (500 x 1, bytes per layer times layers)
                              9 ;;
                             10 ;;#### Width and height constants ####
                     0014    11 _end_W = 20
                     0019    12 _end_H = 25
                             13 
                             14 ;;#### Converted layer tilemaps ####
                             15 ;;   Visible layers: 1
                             16 ;;
                             17 .globl _end
                     01F4    18 _end_SIZE = 500
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 15.
Hexadecimal [16-Bits]



                             38 
                             39 ;;  Direcciones globales
                             40 .globl _tiles_00
                             41 .globl _global_pal
                             42 .globl _sp_player_0
                             43 .globl _sp_player_1
                             44 .globl _sp_player_2
                             45 .globl _sp_player_3
                             46 .globl _sp_player_4
                             47 .globl _sp_player_5
                             48 .globl _sp_player_6
                             49 .globl _sp_spikes
                             50 .globl _sp_spikes_up
                             51 .globl _sp_spikes_rig
                             52 .globl _sp_spikes_lef
                             53 .globl _sp_coin_0
                             54 .globl _sp_coin_1
                             55 .globl _sp_coin_2
                             56 .globl _sp_coin_3
                             57 ;.globl _sp_cannon_0
                             58 ;.globl _sp_cannon_1
                             59 ;.globl _sp_cannon_2
                             60 ;.globl _sp_cannon_ball
                             61 ;.globl _sp_laser_0
                             62 ;.globl _sp_laser_1
                             63 
                             64 ;;  Constantes
                     0004    65 SP_PLAYER_0_W = 4
                     0008    66 SP_PLAYER_0_H = 8
                     0007    67 SP_SPIKES_W = 7
                     0006    68 SP_SPIKES_H = 6
                     0007    69 SP_SPIKES_UP_W = 7
                     0006    70 SP_SPIKES_UP_H = 6
                     0003    71 SP_SPIKES_RIG_W = 3
                     000E    72 SP_SPIKES_RIG_H = 14
                     0003    73 SP_SPIKES_LEF_W = 3
                     000E    74 SP_SPIKES_LEF_H = 14
                     0005    75 SP_COIN_0_W = 5
                     000A    76 SP_COIN_0_H = 10
                             77 ;SP_CANNON_0_W = 4
                             78 ;SP_CANNON_0_H = 6
                             79 ;SP_CANNON_BALL_W = 2
                             80 ;SP_CANNON_BALL_H = 4
                             81 ;SP_LASER_0_W = 4
                             82 ;SP_LASER_0_H = 6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 16.
Hexadecimal [16-Bits]



                             26 .include "man/entity_manager.h.s"
                              1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              2 ;;    Coin Jump: a videogame developed for Amstrad CPC 464.                            ;;
                              3 ;;    Copyright (C) 2022  Senén Martínez Acame & Sergio Tortajada Santonja             ;;
                              4 ;;                                                                                     ;;
                              5 ;;    This program is free software: you can redistribute it and/or modify             ;;
                              6 ;;    it under the terms of the GNU General Public License as published by             ;;
                              7 ;;    the Free Software Foundation, either version 3 of the License, or                ;;
                              8 ;;    (at your option) any later version.                                              ;;
                              9 ;;                                                                                     ;;
                             10 ;;    This program is distributed in the hope that it will be useful,                  ;;
                             11 ;;    but WITHOUT ANY WARRANTY; without even the implied warranty of                   ;;
                             12 ;;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                    ;;
                             13 ;;    GNU General Public License for more details.                                     ;;
                             14 ;;                                                                                     ;;
                             15 ;;    You should have received a copy of the GNU General Public License                ;;
                             16 ;;    along with this program.  If not, see <http://www.gnu.org/licenses/>.            ;;
                             17 ;;                                                                                     ;;
                             18 ;;    Coin Jump  Copyright (C) 2022  Senén Martínez Acame & Sergio Tortajada Santonja  ;;
                             19 ;;                                                                                     ;;
                             20 ;;    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.       ;;
                             21 ;;    This is free software, and you are welcome to redistribute it                    ;;
                             22 ;;    under certain conditions; type `show c' for details.                             ;;
                             23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             24 
                             25 ;;  Funciones
                             26 .globl entityman_getEntityArray_IX
                             27 .globl entityman_getNumEntities_A
                             28 .globl entityman_getIX_A
                             29 .globl entityman_forall
                             30 .globl post_func
                             31 .globl entityman_create_mulitple
                             32 .globl entityman_destroy_entities
                             33 
                             34 ;;  Macros
                             35 .macro DefineEntity _name _x, _y, _w, _h, _vx, _vy, _sp, _a, _va, _type
                             36 _name::
                             37    .db   _x
                             38    .db   _y
                             39    .db   _w
                             40    .db   _h
                             41    .db   _vx
                             42    .db   _vy
                             43    .dw   _sp
                             44    .db   _a
                             45    .db   _va
                             46    .db   _type
                             47 .endm
                             48 
                             49 ;;  Constantes
                     000F    50 max_entities = 15
                     0000    51 e_x      = 0
                     0001    52 e_y      = 1
                     0002    53 e_w      = 2
                     0003    54 e_h      = 3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 17.
Hexadecimal [16-Bits]



                     0004    55 e_vx     = 4
                     0005    56 e_vy     = 5
                     0006    57 e_sp     = 6
                     0008    58 e_a      = 8
                     0009    59 e_va     = 9
                     000A    60 e_type   = 10
                     000B    61 sizeof_e = 11
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 18.
Hexadecimal [16-Bits]



                             27 .include "man/game_manager.h.s"
                              1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              2 ;;    Coin Jump: a videogame developed for Amstrad CPC 464.                            ;;
                              3 ;;    Copyright (C) 2022  Senén Martínez Acame & Sergio Tortajada Santonja             ;;
                              4 ;;                                                                                     ;;
                              5 ;;    This program is free software: you can redistribute it and/or modify             ;;
                              6 ;;    it under the terms of the GNU General Public License as published by             ;;
                              7 ;;    the Free Software Foundation, either version 3 of the License, or                ;;
                              8 ;;    (at your option) any later version.                                              ;;
                              9 ;;                                                                                     ;;
                             10 ;;    This program is distributed in the hope that it will be useful,                  ;;
                             11 ;;    but WITHOUT ANY WARRANTY; without even the implied warranty of                   ;;
                             12 ;;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                    ;;
                             13 ;;    GNU General Public License for more details.                                     ;;
                             14 ;;                                                                                     ;;
                             15 ;;    You should have received a copy of the GNU General Public License                ;;
                             16 ;;    along with this program.  If not, see <http://www.gnu.org/licenses/>.            ;;
                             17 ;;                                                                                     ;;
                             18 ;;    Coin Jump  Copyright (C) 2022  Senén Martínez Acame & Sergio Tortajada Santonja  ;;
                             19 ;;                                                                                     ;;
                             20 ;;    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.       ;;
                             21 ;;    This is free software, and you are welcome to redistribute it                    ;;
                             22 ;;    under certain conditions; type `show c' for details.                             ;;
                             23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             24 
                             25 ;; Funciones
                             26 .globl gameman_init
                             27 .globl gameman_check_end
                             28 .globl gameman_restart_level
                             29 .globl gameman_get_map
                             30 .globl gameman_get_string
                             31 .globl gameman_set_entities
                             32 .globl comprueba_intro
                             33 
                             34 ;; Macros
                             35 .macro DefineLevel _name_lvl _map, _num_ents, _ents
                             36 _name_lvl::
                             37    .dw  _map
                             38    .db  _num_ents
                             39    .dw  _ents
                             40 .endm
                             41 
                             42 ;; Constantes
                     0005    43 lvl_size = 5
                     0000    44 l_map = 0
                     0002    45 l_num = 2
                     0003    46 l_ents = 3
                             47 
                     000A    48 lvl_MTStudios_bytes = 10
                     000C    49 lvl1_Ianixaa_bytes = 12
                     000E    50 lvl_Tomateixon_bytes = 14
                     0010    51 lvl_Spicyboat_Studios_bytes = 16
                     0012    52 lvl_rnd_project22_bytes = 18
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 19.
Hexadecimal [16-Bits]



                             28 .include "sys/animation_system.h.s"
                              1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              2 ;;    Coin Jump: a videogame developed for Amstrad CPC 464.                            ;;
                              3 ;;    Copyright (C) 2022  Senén Martínez Acame & Sergio Tortajada Santonja             ;;
                              4 ;;                                                                                     ;;
                              5 ;;    This program is free software: you can redistribute it and/or modify             ;;
                              6 ;;    it under the terms of the GNU General Public License as published by             ;;
                              7 ;;    the Free Software Foundation, either version 3 of the License, or                ;;
                              8 ;;    (at your option) any later version.                                              ;;
                              9 ;;                                                                                     ;;
                             10 ;;    This program is distributed in the hope that it will be useful,                  ;;
                             11 ;;    but WITHOUT ANY WARRANTY; without even the implied warranty of                   ;;
                             12 ;;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                    ;;
                             13 ;;    GNU General Public License for more details.                                     ;;
                             14 ;;                                                                                     ;;
                             15 ;;    You should have received a copy of the GNU General Public License                ;;
                             16 ;;    along with this program.  If not, see <http://www.gnu.org/licenses/>.            ;;
                             17 ;;                                                                                     ;;
                             18 ;;    Coin Jump  Copyright (C) 2022  Senén Martínez Acame & Sergio Tortajada Santonja  ;;
                             19 ;;                                                                                     ;;
                             20 ;;    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.       ;;
                             21 ;;    This is free software, and you are welcome to redistribute it                    ;;
                             22 ;;    under certain conditions; type `show c' for details.                             ;;
                             23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             24 
                             25 ;;  Animaciones
                             26 .globl player_walking
                             27 .globl player_jumping
                             28 .globl spikes_anim
                             29 .globl spikes_up_anim
                             30 .globl spikes_rig_anim
                             31 .globl spikes_lef_anim
                             32 .globl coin_anim
                             33 ;.globl cannon_anim
                             34 ;.globl cannon_ball_anim
                             35 ;.globl laser_anim
                             36 
                             37 ;;  Funciones
                             38 .globl animationsys_getSprite
                             39 .globl animationsys_playerJump
                             40 .globl animationsys_playerWalk
                             41 .globl animationsys_setSprite
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 20.
Hexadecimal [16-Bits]



                             29 .include "sys/render_system.h.s"
                              1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              2 ;;    Coin Jump: a videogame developed for Amstrad CPC 464.                            ;;
                              3 ;;    Copyright (C) 2022  Senén Martínez Acame & Sergio Tortajada Santonja             ;;
                              4 ;;                                                                                     ;;
                              5 ;;    This program is free software: you can redistribute it and/or modify             ;;
                              6 ;;    it under the terms of the GNU General Public License as published by             ;;
                              7 ;;    the Free Software Foundation, either version 3 of the License, or                ;;
                              8 ;;    (at your option) any later version.                                              ;;
                              9 ;;                                                                                     ;;
                             10 ;;    This program is distributed in the hope that it will be useful,                  ;;
                             11 ;;    but WITHOUT ANY WARRANTY; without even the implied warranty of                   ;;
                             12 ;;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                    ;;
                             13 ;;    GNU General Public License for more details.                                     ;;
                             14 ;;                                                                                     ;;
                             15 ;;    You should have received a copy of the GNU General Public License                ;;
                             16 ;;    along with this program.  If not, see <http://www.gnu.org/licenses/>.            ;;
                             17 ;;                                                                                     ;;
                             18 ;;    Coin Jump  Copyright (C) 2022  Senén Martínez Acame & Sergio Tortajada Santonja  ;;
                             19 ;;                                                                                     ;;
                             20 ;;    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.       ;;
                             21 ;;    This is free software, and you are welcome to redistribute it                    ;;
                             22 ;;    under certain conditions; type `show c' for details.                             ;;
                             23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             24 
                             25 ;;  Funciones
                             26 .globl rendersys_init
                             27 .globl rendersys_update
                             28 .globl rendersys_tilemap
                             29 .globl cpct_setDrawCharM0_asm
                             30 .globl _myDrawStringM0
                             31 
                             32 ;;  Constantes
                     0014    33 width_map   = 20
                     1914    34 size_window = 0x1914
                     0010    35 size_pal    = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 21.
Hexadecimal [16-Bits]



                             30 .include "sys/music_system.h.s"
                              1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              2 ;;    Coin Jump: a videogame developed for Amstrad CPC 464.                            ;;
                              3 ;;    Copyright (C) 2022  Senén Martínez Acame & Sergio Tortajada Santonja             ;;
                              4 ;;                                                                                     ;;
                              5 ;;    This program is free software: you can redistribute it and/or modify             ;;
                              6 ;;    it under the terms of the GNU General Public License as published by             ;;
                              7 ;;    the Free Software Foundation, either version 3 of the License, or                ;;
                              8 ;;    (at your option) any later version.                                              ;;
                              9 ;;                                                                                     ;;
                             10 ;;    This program is distributed in the hope that it will be useful,                  ;;
                             11 ;;    but WITHOUT ANY WARRANTY; without even the implied warranty of                   ;;
                             12 ;;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                    ;;
                             13 ;;    GNU General Public License for more details.                                     ;;
                             14 ;;                                                                                     ;;
                             15 ;;    You should have received a copy of the GNU General Public License                ;;
                             16 ;;    along with this program.  If not, see <http://www.gnu.org/licenses/>.            ;;
                             17 ;;                                                                                     ;;
                             18 ;;    Coin Jump  Copyright (C) 2022  Senén Martínez Acame & Sergio Tortajada Santonja  ;;
                             19 ;;                                                                                     ;;
                             20 ;;    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.       ;;
                             21 ;;    This is free software, and you are welcome to redistribute it                    ;;
                             22 ;;    under certain conditions; type `show c' for details.                             ;;
                             23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             24 
                             25 ;;  Includes
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 22.
Hexadecimal [16-Bits]



                             26 .include "assets/music/Musica.h.s"
                              1 ;;;;
                              2 ;;;; File generated by cpct_aks2c CPCtelera script
                              3 ;;;; Souce file of this conversion: assets/music/Musica.aks
                              4 ;;;; Generation time: sáb 28 ene 2023 11:49:59 CET
                              5 ;;;;
                              6 
                              7 ;;;; Song 'musica' metadata constants
                     0250     8 musica_address = 0x0250
                     0095     9 musica_size    = 149
                     02E4    10 musica_end     = 0x2e4
                             11 
                             12 ;;;; Song 'musica' declaration
                             13 .globl _musica
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 23.
Hexadecimal [16-Bits]



                             27 .include "assets/music/Instrument.h.s"
                              1 ;;;;
                              2 ;;;; File generated by cpct_aks2c CPCtelera script
                              3 ;;;; Souce file of this conversion: assets/music/Instrument.aks
                              4 ;;;; Generation time: sáb 28 ene 2023 11:49:57 CET
                              5 ;;;;
                              6 
                              7 ;;;; Song 'instrument' metadata constants
                     02E5     8 instrument_address = 0x02E5
                     004E     9 instrument_size    = 78
                     0332    10 instrument_end     = 0x332
                             11 
                             12 ;;;; Song 'instrument' declaration
                             13 .globl _instrument
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 24.
Hexadecimal [16-Bits]



                             28 .include "cpctelera_functions.h.s"
                              1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              2 ;;    Coin Jump: a videogame developed for Amstrad CPC 464.                            ;;
                              3 ;;    Copyright (C) 2022  Senén Martínez Acame & Sergio Tortajada Santonja             ;;
                              4 ;;                                                                                     ;;
                              5 ;;    This program is free software: you can redistribute it and/or modify             ;;
                              6 ;;    it under the terms of the GNU General Public License as published by             ;;
                              7 ;;    the Free Software Foundation, either version 3 of the License, or                ;;
                              8 ;;    (at your option) any later version.                                              ;;
                              9 ;;                                                                                     ;;
                             10 ;;    This program is distributed in the hope that it will be useful,                  ;;
                             11 ;;    but WITHOUT ANY WARRANTY; without even the implied warranty of                   ;;
                             12 ;;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                    ;;
                             13 ;;    GNU General Public License for more details.                                     ;;
                             14 ;;                                                                                     ;;
                             15 ;;    You should have received a copy of the GNU General Public License                ;;
                             16 ;;    along with this program.  If not, see <http://www.gnu.org/licenses/>.            ;;
                             17 ;;                                                                                     ;;
                             18 ;;    Coin Jump  Copyright (C) 2022  Senén Martínez Acame & Sergio Tortajada Santonja  ;;
                             19 ;;                                                                                     ;;
                             20 ;;    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.       ;;
                             21 ;;    This is free software, and you are welcome to redistribute it                    ;;
                             22 ;;    under certain conditions; type `show c' for details.                             ;;
                             23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             24 
                             25 ;;  Funciones
                             26 .globl cpct_disableFirmware_asm
                             27 .globl cpct_getScreenPtr_asm
                             28 .globl cpct_drawSolidBox_asm
                             29 .globl cpct_waitVSYNC_asm
                             30 .globl cpct_scanKeyboard_asm
                             31 .globl cpct_isAnyKeyPressed_asm
                             32 .globl cpct_isKeyPressed_asm
                             33 .globl cpct_etm_setDrawTilemap4x8_ag_asm
                             34 .globl cpct_etm_drawTilemap4x8_ag_asm
                             35 .globl cpct_setVideoMode_asm
                             36 .globl cpct_setPalette_asm
                             37 .globl cpct_drawSprite_asm
                             38 .globl cpct_akp_musicInit_asm
                             39 .globl cpct_akp_musicPlay_asm
                             40 .globl cpct_akp_SFXInit_asm
                             41 .globl cpct_akp_SFXPlay_asm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 25.
Hexadecimal [16-Bits]



                             29 
                             30 ;;  Funciones
                             31 .globl musicsys_init
                             32 .globl musicsys_update
                             33 .globl musicsys_jump
                             34 .globl musicsys_death
                             35 .globl musicsys_coin
                             36 
                             37 ;;  Constantes
                     0001    38 rig_channel  = 001
                     0064    39 left_channel = 100
                     0028    40 tone_jump  = 40
                     003C    41 tone_coin  = 60
                     0014    42 tone_death = 20
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 26.
Hexadecimal [16-Bits]



                             31 
   0000                      32 DefineEntity player_4_184,       4, 184, SP_PLAYER_0_W,   SP_PLAYER_0_H,   0, 0, #player_walking,  0, 0, 0
   0000                       1 player_4_184::
   0000 04                    2    .db   4
   0001 B8                    3    .db   184
   0002 04                    4    .db   SP_PLAYER_0_W
   0003 08                    5    .db   SP_PLAYER_0_H
   0004 00                    6    .db   0
   0005 00                    7    .db   0
   0006 00 00                 8    .dw   #player_walking
   0008 00                    9    .db   0
   0009 00                   10    .db   0
   000A 00                   11    .db   0
   000B                      33 DefineEntity player_4_32,        4,  32, SP_PLAYER_0_W,   SP_PLAYER_0_H,   0, 0, #player_walking,  0, 0, 0
   000B                       1 player_4_32::
   000B 04                    2    .db   4
   000C 20                    3    .db   32
   000D 04                    4    .db   SP_PLAYER_0_W
   000E 08                    5    .db   SP_PLAYER_0_H
   000F 00                    6    .db   0
   0010 00                    7    .db   0
   0011 00 00                 8    .dw   #player_walking
   0013 00                    9    .db   0
   0014 00                   10    .db   0
   0015 00                   11    .db   0
                             34 ;DefineEntity player_4_24,        4,  24, SP_PLAYER_0_W,   SP_PLAYER_0_H,   0, 0, #player_walking,  0, 0, 0
                             35 
   0016                      36 DefineEntity spikes_7_186,       7, 186, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   0016                       1 spikes_7_186::
   0016 07                    2    .db   7
   0017 BA                    3    .db   186
   0018 07                    4    .db   SP_SPIKES_W
   0019 06                    5    .db   SP_SPIKES_H
   001A 00                    6    .db   0
   001B 00                    7    .db   0
   001C 00 00                 8    .dw   #spikes_anim
   001E 00                    9    .db   0
   001F 00                   10    .db   0
   0020 01                   11    .db   1
                             37 ;DefineEntity spikes_9_186,       9, 186, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   0021                      38 DefineEntity spikes_14_186,     14, 186, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   0021                       1 spikes_14_186::
   0021 0E                    2    .db   14
   0022 BA                    3    .db   186
   0023 07                    4    .db   SP_SPIKES_W
   0024 06                    5    .db   SP_SPIKES_H
   0025 00                    6    .db   0
   0026 00                    7    .db   0
   0027 00 00                 8    .dw   #spikes_anim
   0029 00                    9    .db   0
   002A 00                   10    .db   0
   002B 01                   11    .db   1
   002C                      39 DefineEntity spikes_19_186,     19, 186, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   002C                       1 spikes_19_186::
   002C 13                    2    .db   19
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 27.
Hexadecimal [16-Bits]



   002D BA                    3    .db   186
   002E 07                    4    .db   SP_SPIKES_W
   002F 06                    5    .db   SP_SPIKES_H
   0030 00                    6    .db   0
   0031 00                    7    .db   0
   0032 00 00                 8    .dw   #spikes_anim
   0034 00                    9    .db   0
   0035 00                   10    .db   0
   0036 01                   11    .db   1
                             40 ;DefineEntity spikes_29_186,     29, 186, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   0037                      41 DefineEntity spikes_31_186,     31, 186, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   0037                       1 spikes_31_186::
   0037 1F                    2    .db   31
   0038 BA                    3    .db   186
   0039 07                    4    .db   SP_SPIKES_W
   003A 06                    5    .db   SP_SPIKES_H
   003B 00                    6    .db   0
   003C 00                    7    .db   0
   003D 00 00                 8    .dw   #spikes_anim
   003F 00                    9    .db   0
   0040 00                   10    .db   0
   0041 01                   11    .db   1
   0042                      42 DefineEntity spikes_39_186,     39, 186, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   0042                       1 spikes_39_186::
   0042 27                    2    .db   39
   0043 BA                    3    .db   186
   0044 07                    4    .db   SP_SPIKES_W
   0045 06                    5    .db   SP_SPIKES_H
   0046 00                    6    .db   0
   0047 00                    7    .db   0
   0048 00 00                 8    .dw   #spikes_anim
   004A 00                    9    .db   0
   004B 00                   10    .db   0
   004C 01                   11    .db   1
                             43 ;DefineEntity spikes_47_186,     47, 186, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   004D                      44 DefineEntity spikes_49_186,     49, 186, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   004D                       1 spikes_49_186::
   004D 31                    2    .db   49
   004E BA                    3    .db   186
   004F 07                    4    .db   SP_SPIKES_W
   0050 06                    5    .db   SP_SPIKES_H
   0051 00                    6    .db   0
   0052 00                    7    .db   0
   0053 00 00                 8    .dw   #spikes_anim
   0055 00                    9    .db   0
   0056 00                   10    .db   0
   0057 01                   11    .db   1
   0058                      45 DefineEntity spikes_50_186,     50, 186, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   0058                       1 spikes_50_186::
   0058 32                    2    .db   50
   0059 BA                    3    .db   186
   005A 07                    4    .db   SP_SPIKES_W
   005B 06                    5    .db   SP_SPIKES_H
   005C 00                    6    .db   0
   005D 00                    7    .db   0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 28.
Hexadecimal [16-Bits]



   005E 00 00                 8    .dw   #spikes_anim
   0060 00                    9    .db   0
   0061 00                   10    .db   0
   0062 01                   11    .db   1
   0063                      46 DefineEntity spikes_59_186,     59, 186, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   0063                       1 spikes_59_186::
   0063 3B                    2    .db   59
   0064 BA                    3    .db   186
   0065 07                    4    .db   SP_SPIKES_W
   0066 06                    5    .db   SP_SPIKES_H
   0067 00                    6    .db   0
   0068 00                    7    .db   0
   0069 00 00                 8    .dw   #spikes_anim
   006B 00                    9    .db   0
   006C 00                   10    .db   0
   006D 01                   11    .db   1
   006E                      47 DefineEntity spikes_56_186,     56, 186, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   006E                       1 spikes_56_186::
   006E 38                    2    .db   56
   006F BA                    3    .db   186
   0070 07                    4    .db   SP_SPIKES_W
   0071 06                    5    .db   SP_SPIKES_H
   0072 00                    6    .db   0
   0073 00                    7    .db   0
   0074 00 00                 8    .dw   #spikes_anim
   0076 00                    9    .db   0
   0077 00                   10    .db   0
   0078 01                   11    .db   1
   0079                      48 DefineEntity spikes_69_186,     69, 186, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   0079                       1 spikes_69_186::
   0079 45                    2    .db   69
   007A BA                    3    .db   186
   007B 07                    4    .db   SP_SPIKES_W
   007C 06                    5    .db   SP_SPIKES_H
   007D 00                    6    .db   0
   007E 00                    7    .db   0
   007F 00 00                 8    .dw   #spikes_anim
   0081 00                    9    .db   0
   0082 00                   10    .db   0
   0083 01                   11    .db   1
   0084                      49 DefineEntity spikes_32_178,     32, 178, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   0084                       1 spikes_32_178::
   0084 20                    2    .db   32
   0085 B2                    3    .db   178
   0086 07                    4    .db   SP_SPIKES_W
   0087 06                    5    .db   SP_SPIKES_H
   0088 00                    6    .db   0
   0089 00                    7    .db   0
   008A 00 00                 8    .dw   #spikes_anim
   008C 00                    9    .db   0
   008D 00                   10    .db   0
   008E 01                   11    .db   1
   008F                      50 DefineEntity spikes_41_178,     41, 178, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   008F                       1 spikes_41_178::
   008F 29                    2    .db   41
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 29.
Hexadecimal [16-Bits]



   0090 B2                    3    .db   178
   0091 07                    4    .db   SP_SPIKES_W
   0092 06                    5    .db   SP_SPIKES_H
   0093 00                    6    .db   0
   0094 00                    7    .db   0
   0095 00 00                 8    .dw   #spikes_anim
   0097 00                    9    .db   0
   0098 00                   10    .db   0
   0099 01                   11    .db   1
   009A                      51 DefineEntity spikes_12_170,     12, 170, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   009A                       1 spikes_12_170::
   009A 0C                    2    .db   12
   009B AA                    3    .db   170
   009C 07                    4    .db   SP_SPIKES_W
   009D 06                    5    .db   SP_SPIKES_H
   009E 00                    6    .db   0
   009F 00                    7    .db   0
   00A0 00 00                 8    .dw   #spikes_anim
   00A2 00                    9    .db   0
   00A3 00                   10    .db   0
   00A4 01                   11    .db   1
   00A5                      52 DefineEntity spikes_20_170,     20, 170, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   00A5                       1 spikes_20_170::
   00A5 14                    2    .db   20
   00A6 AA                    3    .db   170
   00A7 07                    4    .db   SP_SPIKES_W
   00A8 06                    5    .db   SP_SPIKES_H
   00A9 00                    6    .db   0
   00AA 00                    7    .db   0
   00AB 00 00                 8    .dw   #spikes_anim
   00AD 00                    9    .db   0
   00AE 00                   10    .db   0
   00AF 01                   11    .db   1
   00B0                      53 DefineEntity spikes_28_170,     28, 170, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   00B0                       1 spikes_28_170::
   00B0 1C                    2    .db   28
   00B1 AA                    3    .db   170
   00B2 07                    4    .db   SP_SPIKES_W
   00B3 06                    5    .db   SP_SPIKES_H
   00B4 00                    6    .db   0
   00B5 00                    7    .db   0
   00B6 00 00                 8    .dw   #spikes_anim
   00B8 00                    9    .db   0
   00B9 00                   10    .db   0
   00BA 01                   11    .db   1
   00BB                      54 DefineEntity spikes_12_130,     12, 130, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   00BB                       1 spikes_12_130::
   00BB 0C                    2    .db   12
   00BC 82                    3    .db   130
   00BD 07                    4    .db   SP_SPIKES_W
   00BE 06                    5    .db   SP_SPIKES_H
   00BF 00                    6    .db   0
   00C0 00                    7    .db   0
   00C1 00 00                 8    .dw   #spikes_anim
   00C3 00                    9    .db   0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 30.
Hexadecimal [16-Bits]



   00C4 00                   10    .db   0
   00C5 01                   11    .db   1
   00C6                      55 DefineEntity spikes_61_130,     61, 130, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   00C6                       1 spikes_61_130::
   00C6 3D                    2    .db   61
   00C7 82                    3    .db   130
   00C8 07                    4    .db   SP_SPIKES_W
   00C9 06                    5    .db   SP_SPIKES_H
   00CA 00                    6    .db   0
   00CB 00                    7    .db   0
   00CC 00 00                 8    .dw   #spikes_anim
   00CE 00                    9    .db   0
   00CF 00                   10    .db   0
   00D0 01                   11    .db   1
   00D1                      56 DefineEntity spikes_36_122,     36, 122, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   00D1                       1 spikes_36_122::
   00D1 24                    2    .db   36
   00D2 7A                    3    .db   122
   00D3 07                    4    .db   SP_SPIKES_W
   00D4 06                    5    .db   SP_SPIKES_H
   00D5 00                    6    .db   0
   00D6 00                    7    .db   0
   00D7 00 00                 8    .dw   #spikes_anim
   00D9 00                    9    .db   0
   00DA 00                   10    .db   0
   00DB 01                   11    .db   1
   00DC                      57 DefineEntity spikes_25_90,      25,  90, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   00DC                       1 spikes_25_90::
   00DC 19                    2    .db   25
   00DD 5A                    3    .db   90
   00DE 07                    4    .db   SP_SPIKES_W
   00DF 06                    5    .db   SP_SPIKES_H
   00E0 00                    6    .db   0
   00E1 00                    7    .db   0
   00E2 00 00                 8    .dw   #spikes_anim
   00E4 00                    9    .db   0
   00E5 00                   10    .db   0
   00E6 01                   11    .db   1
   00E7                      58 DefineEntity spikes_47_90,      47,  90, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   00E7                       1 spikes_47_90::
   00E7 2F                    2    .db   47
   00E8 5A                    3    .db   90
   00E9 07                    4    .db   SP_SPIKES_W
   00EA 06                    5    .db   SP_SPIKES_H
   00EB 00                    6    .db   0
   00EC 00                    7    .db   0
   00ED 00 00                 8    .dw   #spikes_anim
   00EF 00                    9    .db   0
   00F0 00                   10    .db   0
   00F1 01                   11    .db   1
   00F2                      59 DefineEntity spikes_36_50,       36, 50, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   00F2                       1 spikes_36_50::
   00F2 24                    2    .db   36
   00F3 32                    3    .db   50
   00F4 07                    4    .db   SP_SPIKES_W
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 31.
Hexadecimal [16-Bits]



   00F5 06                    5    .db   SP_SPIKES_H
   00F6 00                    6    .db   0
   00F7 00                    7    .db   0
   00F8 00 00                 8    .dw   #spikes_anim
   00FA 00                    9    .db   0
   00FB 00                   10    .db   0
   00FC 01                   11    .db   1
   00FD                      60 DefineEntity spikes_16_42,      16,  42, SP_SPIKES_W,     SP_SPIKES_H,     0, 0, #spikes_anim,     0, 0, 1
   00FD                       1 spikes_16_42::
   00FD 10                    2    .db   16
   00FE 2A                    3    .db   42
   00FF 07                    4    .db   SP_SPIKES_W
   0100 06                    5    .db   SP_SPIKES_H
   0101 00                    6    .db   0
   0102 00                    7    .db   0
   0103 00 00                 8    .dw   #spikes_anim
   0105 00                    9    .db   0
   0106 00                   10    .db   0
   0107 01                   11    .db   1
                             61 
                             62 ;DefineEntity spikes_up_41_178,  41, 178, SP_SPIKES_UP_W,  SP_SPIKES_UP_H,  0, 0, #spikes_up_anim,  0, 0, 1
   0108                      63 DefineEntity spikes_up_37_144,  37, 144, SP_SPIKES_UP_W,  SP_SPIKES_UP_H,  0, 0, #spikes_up_anim,  0, 0, 1
   0108                       1 spikes_up_37_144::
   0108 25                    2    .db   37
   0109 90                    3    .db   144
   010A 07                    4    .db   SP_SPIKES_UP_W
   010B 06                    5    .db   SP_SPIKES_UP_H
   010C 00                    6    .db   0
   010D 00                    7    .db   0
   010E 00 00                 8    .dw   #spikes_up_anim
   0110 00                    9    .db   0
   0111 00                   10    .db   0
   0112 01                   11    .db   1
   0113                      64 DefineEntity spikes_up_37_72,   37,  72, SP_SPIKES_UP_W,  SP_SPIKES_UP_H,  0, 0, #spikes_up_anim,  0, 0, 1
   0113                       1 spikes_up_37_72::
   0113 25                    2    .db   37
   0114 48                    3    .db   72
   0115 07                    4    .db   SP_SPIKES_UP_W
   0116 06                    5    .db   SP_SPIKES_UP_H
   0117 00                    6    .db   0
   0118 00                    7    .db   0
   0119 00 00                 8    .dw   #spikes_up_anim
   011B 00                    9    .db   0
   011C 00                   10    .db   0
   011D 01                   11    .db   1
                             65 
   011E                      66 DefineEntity spikes_rig_21_140, 21, 140, SP_SPIKES_RIG_W, SP_SPIKES_RIG_H, 0, 0, #spikes_rig_anim, 0, 0, 1
   011E                       1 spikes_rig_21_140::
   011E 15                    2    .db   21
   011F 8C                    3    .db   140
   0120 03                    4    .db   SP_SPIKES_RIG_W
   0121 0E                    5    .db   SP_SPIKES_RIG_H
   0122 00                    6    .db   0
   0123 00                    7    .db   0
   0124 00 00                 8    .dw   #spikes_rig_anim
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 32.
Hexadecimal [16-Bits]



   0126 00                    9    .db   0
   0127 00                   10    .db   0
   0128 01                   11    .db   1
   0129                      67 DefineEntity spikes_rig_33_130, 33, 130, SP_SPIKES_RIG_W, SP_SPIKES_RIG_H, 0, 0, #spikes_rig_anim, 0, 0, 1
   0129                       1 spikes_rig_33_130::
   0129 21                    2    .db   33
   012A 82                    3    .db   130
   012B 03                    4    .db   SP_SPIKES_RIG_W
   012C 0E                    5    .db   SP_SPIKES_RIG_H
   012D 00                    6    .db   0
   012E 00                    7    .db   0
   012F 00 00                 8    .dw   #spikes_rig_anim
   0131 00                    9    .db   0
   0132 00                   10    .db   0
   0133 01                   11    .db   1
                             68 
   0134                      69 DefineEntity spikes_rig_13_113, 13, 113, SP_SPIKES_RIG_W, SP_SPIKES_RIG_H, 0, 0, #spikes_rig_anim, 0, 0, 1
   0134                       1 spikes_rig_13_113::
   0134 0D                    2    .db   13
   0135 71                    3    .db   113
   0136 03                    4    .db   SP_SPIKES_RIG_W
   0137 0E                    5    .db   SP_SPIKES_RIG_H
   0138 00                    6    .db   0
   0139 00                    7    .db   0
   013A 00 00                 8    .dw   #spikes_rig_anim
   013C 00                    9    .db   0
   013D 00                   10    .db   0
   013E 01                   11    .db   1
   013F                      70 DefineEntity spikes_rig_21_102, 21, 102, SP_SPIKES_RIG_W, SP_SPIKES_RIG_H, 0, 0, #spikes_rig_anim, 0, 0, 1
   013F                       1 spikes_rig_21_102::
   013F 15                    2    .db   21
   0140 66                    3    .db   102
   0141 03                    4    .db   SP_SPIKES_RIG_W
   0142 0E                    5    .db   SP_SPIKES_RIG_H
   0143 00                    6    .db   0
   0144 00                    7    .db   0
   0145 00 00                 8    .dw   #spikes_rig_anim
   0147 00                    9    .db   0
   0148 00                   10    .db   0
   0149 01                   11    .db   1
   014A                      71 DefineEntity spikes_rig_33_58,  33,  58, SP_SPIKES_RIG_W, SP_SPIKES_RIG_H, 0, 0, #spikes_rig_anim, 0, 0, 1
   014A                       1 spikes_rig_33_58::
   014A 21                    2    .db   33
   014B 3A                    3    .db   58
   014C 03                    4    .db   SP_SPIKES_RIG_W
   014D 0E                    5    .db   SP_SPIKES_RIG_H
   014E 00                    6    .db   0
   014F 00                    7    .db   0
   0150 00 00                 8    .dw   #spikes_rig_anim
   0152 00                    9    .db   0
   0153 00                   10    .db   0
   0154 01                   11    .db   1
   0155                      72 DefineEntity spikes_rig_21_52,  21,  52, SP_SPIKES_RIG_W, SP_SPIKES_RIG_H, 0, 0, #spikes_rig_anim, 0, 0, 1
   0155                       1 spikes_rig_21_52::
   0155 15                    2    .db   21
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 33.
Hexadecimal [16-Bits]



   0156 34                    3    .db   52
   0157 03                    4    .db   SP_SPIKES_RIG_W
   0158 0E                    5    .db   SP_SPIKES_RIG_H
   0159 00                    6    .db   0
   015A 00                    7    .db   0
   015B 00 00                 8    .dw   #spikes_rig_anim
   015D 00                    9    .db   0
   015E 00                   10    .db   0
   015F 01                   11    .db   1
   0160                      73 DefineEntity spikes_rig_13_33,  13,  33, SP_SPIKES_RIG_W, SP_SPIKES_RIG_H, 0, 0, #spikes_rig_anim, 0, 0, 1
   0160                       1 spikes_rig_13_33::
   0160 0D                    2    .db   13
   0161 21                    3    .db   33
   0162 03                    4    .db   SP_SPIKES_RIG_W
   0163 0E                    5    .db   SP_SPIKES_RIG_H
   0164 00                    6    .db   0
   0165 00                    7    .db   0
   0166 00 00                 8    .dw   #spikes_rig_anim
   0168 00                    9    .db   0
   0169 00                   10    .db   0
   016A 01                   11    .db   1
   016B                      74 DefineEntity spikes_rig_37_27,  37,  27, SP_SPIKES_RIG_W, SP_SPIKES_RIG_H, 0, 0, #spikes_rig_anim, 0, 0, 1
   016B                       1 spikes_rig_37_27::
   016B 25                    2    .db   37
   016C 1B                    3    .db   27
   016D 03                    4    .db   SP_SPIKES_RIG_W
   016E 0E                    5    .db   SP_SPIKES_RIG_H
   016F 00                    6    .db   0
   0170 00                    7    .db   0
   0171 00 00                 8    .dw   #spikes_rig_anim
   0173 00                    9    .db   0
   0174 00                   10    .db   0
   0175 01                   11    .db   1
                             75 ;DefineEntity spikes_rig_37_13,  37,  13, SP_SPIKES_RIG_W, SP_SPIKES_RIG_H, 0, 0, #spikes_rig_anim, 0, 0, 1
   0176                      76 DefineEntity spikes_rig_21_9,   21,   9, SP_SPIKES_RIG_W, SP_SPIKES_RIG_H, 0, 0, #spikes_rig_anim, 0, 0, 1
   0176                       1 spikes_rig_21_9::
   0176 15                    2    .db   21
   0177 09                    3    .db   9
   0178 03                    4    .db   SP_SPIKES_RIG_W
   0179 0E                    5    .db   SP_SPIKES_RIG_H
   017A 00                    6    .db   0
   017B 00                    7    .db   0
   017C 00 00                 8    .dw   #spikes_rig_anim
   017E 00                    9    .db   0
   017F 00                   10    .db   0
   0180 01                   11    .db   1
                             77 
                             78 ;DefineEntity spikes_lef_12_154, 12, 154, SP_SPIKES_LEF_W, SP_SPIKES_LEF_H, 0, 0, #spikes_lef_anim, 0, 0, 1
   0181                      79 DefineEntity spikes_lef_12_153, 12, 153, SP_SPIKES_LEF_W, SP_SPIKES_LEF_H, 0, 0, #spikes_lef_anim, 0, 0, 1
   0181                       1 spikes_lef_12_153::
   0181 0C                    2    .db   12
   0182 99                    3    .db   153
   0183 03                    4    .db   SP_SPIKES_LEF_W
   0184 0E                    5    .db   SP_SPIKES_LEF_H
   0185 00                    6    .db   0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 34.
Hexadecimal [16-Bits]



   0186 00                    7    .db   0
   0187 00 00                 8    .dw   #spikes_lef_anim
   0189 00                    9    .db   0
   018A 00                   10    .db   0
   018B 01                   11    .db   1
   018C                      80 DefineEntity spikes_lef_12_138, 12, 138, SP_SPIKES_LEF_W, SP_SPIKES_LEF_H, 0, 0, #spikes_lef_anim, 0, 0, 1
   018C                       1 spikes_lef_12_138::
   018C 0C                    2    .db   12
   018D 8A                    3    .db   138
   018E 03                    4    .db   SP_SPIKES_LEF_W
   018F 0E                    5    .db   SP_SPIKES_LEF_H
   0190 00                    6    .db   0
   0191 00                    7    .db   0
   0192 00 00                 8    .dw   #spikes_lef_anim
   0194 00                    9    .db   0
   0195 00                   10    .db   0
   0196 01                   11    .db   1
   0197                      81 DefineEntity spikes_lef_44_128, 44, 128, SP_SPIKES_LEF_W, SP_SPIKES_LEF_H, 0, 0, #spikes_lef_anim, 0, 0, 1
   0197                       1 spikes_lef_44_128::
   0197 2C                    2    .db   44
   0198 80                    3    .db   128
   0199 03                    4    .db   SP_SPIKES_LEF_W
   019A 0E                    5    .db   SP_SPIKES_LEF_H
   019B 00                    6    .db   0
   019C 00                    7    .db   0
   019D 00 00                 8    .dw   #spikes_lef_anim
   019F 00                    9    .db   0
   01A0 00                   10    .db   0
   01A1 01                   11    .db   1
   01A2                      82 DefineEntity spikes_lef_12_90,  12,  90, SP_SPIKES_LEF_W, SP_SPIKES_LEF_H, 0, 0, #spikes_lef_anim, 0, 0, 1
   01A2                       1 spikes_lef_12_90::
   01A2 0C                    2    .db   12
   01A3 5A                    3    .db   90
   01A4 03                    4    .db   SP_SPIKES_LEF_W
   01A5 0E                    5    .db   SP_SPIKES_LEF_H
   01A6 00                    6    .db   0
   01A7 00                    7    .db   0
   01A8 00 00                 8    .dw   #spikes_lef_anim
   01AA 00                    9    .db   0
   01AB 00                   10    .db   0
   01AC 01                   11    .db   1
   01AD                      83 DefineEntity spikes_lef_12_73,  12,  73, SP_SPIKES_LEF_W, SP_SPIKES_LEF_H, 0, 0, #spikes_lef_anim, 0, 0, 1
   01AD                       1 spikes_lef_12_73::
   01AD 0C                    2    .db   12
   01AE 49                    3    .db   73
   01AF 03                    4    .db   SP_SPIKES_LEF_W
   01B0 0E                    5    .db   SP_SPIKES_LEF_H
   01B1 00                    6    .db   0
   01B2 00                    7    .db   0
   01B3 00 00                 8    .dw   #spikes_lef_anim
   01B5 00                    9    .db   0
   01B6 00                   10    .db   0
   01B7 01                   11    .db   1
   01B8                      84 DefineEntity spikes_lef_44_56,  44,  56, SP_SPIKES_LEF_W, SP_SPIKES_LEF_H, 0, 0, #spikes_lef_anim, 0, 0, 1
   01B8                       1 spikes_lef_44_56::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 35.
Hexadecimal [16-Bits]



   01B8 2C                    2    .db   44
   01B9 38                    3    .db   56
   01BA 03                    4    .db   SP_SPIKES_LEF_W
   01BB 0E                    5    .db   SP_SPIKES_LEF_H
   01BC 00                    6    .db   0
   01BD 00                    7    .db   0
   01BE 00 00                 8    .dw   #spikes_lef_anim
   01C0 00                    9    .db   0
   01C1 00                   10    .db   0
   01C2 01                   11    .db   1
   01C3                      85 DefineEntity spikes_lef_12_42,  12,  42, SP_SPIKES_LEF_W, SP_SPIKES_LEF_H, 0, 0, #spikes_lef_anim, 0, 0, 1
   01C3                       1 spikes_lef_12_42::
   01C3 0C                    2    .db   12
   01C4 2A                    3    .db   42
   01C5 03                    4    .db   SP_SPIKES_LEF_W
   01C6 0E                    5    .db   SP_SPIKES_LEF_H
   01C7 00                    6    .db   0
   01C8 00                    7    .db   0
   01C9 00 00                 8    .dw   #spikes_lef_anim
   01CB 00                    9    .db   0
   01CC 00                   10    .db   0
   01CD 01                   11    .db   1
                             86 
   01CE                      87 DefineEntity coin_70_180,       70, 180, SP_COIN_0_W,     SP_COIN_0_H,     0, 0, #coin_anim,       0, 0, 2
   01CE                       1 coin_70_180::
   01CE 46                    2    .db   70
   01CF B4                    3    .db   180
   01D0 05                    4    .db   SP_COIN_0_W
   01D1 0A                    5    .db   SP_COIN_0_H
   01D2 00                    6    .db   0
   01D3 00                    7    .db   0
   01D4 00 00                 8    .dw   #coin_anim
   01D6 00                    9    .db   0
   01D7 00                   10    .db   0
   01D8 02                   11    .db   2
   01D9                      88 DefineEntity coin_70_170,       70, 170, SP_COIN_0_W,     SP_COIN_0_H,     0, 0, #coin_anim,       0, 0, 2
   01D9                       1 coin_70_170::
   01D9 46                    2    .db   70
   01DA AA                    3    .db   170
   01DB 05                    4    .db   SP_COIN_0_W
   01DC 0A                    5    .db   SP_COIN_0_H
   01DD 00                    6    .db   0
   01DE 00                    7    .db   0
   01DF 00 00                 8    .dw   #coin_anim
   01E1 00                    9    .db   0
   01E2 00                   10    .db   0
   01E3 02                   11    .db   2
   01E4                      89 DefineEntity coin_68_156,       68, 156, SP_COIN_0_W,     SP_COIN_0_H,     0, 0, #coin_anim,       0, 0, 2
   01E4                       1 coin_68_156::
   01E4 44                    2    .db   68
   01E5 9C                    3    .db   156
   01E6 05                    4    .db   SP_COIN_0_W
   01E7 0A                    5    .db   SP_COIN_0_H
   01E8 00                    6    .db   0
   01E9 00                    7    .db   0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 36.
Hexadecimal [16-Bits]



   01EA 00 00                 8    .dw   #coin_anim
   01EC 00                    9    .db   0
   01ED 00                   10    .db   0
   01EE 02                   11    .db   2
   01EF                      90 DefineEntity coin_67_68,        67,  68, SP_COIN_0_W,     SP_COIN_0_H,     0, 0, #coin_anim,       0, 0, 2
   01EF                       1 coin_67_68::
   01EF 43                    2    .db   67
   01F0 44                    3    .db   68
   01F1 05                    4    .db   SP_COIN_0_W
   01F2 0A                    5    .db   SP_COIN_0_H
   01F3 00                    6    .db   0
   01F4 00                    7    .db   0
   01F5 00 00                 8    .dw   #coin_anim
   01F7 00                    9    .db   0
   01F8 00                   10    .db   0
   01F9 02                   11    .db   2
   01FA                      91 DefineEntity coin_16_60,        16,  60, SP_COIN_0_W,     SP_COIN_0_H,     0, 0, #coin_anim,       0, 0, 2
   01FA                       1 coin_16_60::
   01FA 10                    2    .db   16
   01FB 3C                    3    .db   60
   01FC 05                    4    .db   SP_COIN_0_W
   01FD 0A                    5    .db   SP_COIN_0_H
   01FE 00                    6    .db   0
   01FF 00                    7    .db   0
   0200 00 00                 8    .dw   #coin_anim
   0202 00                    9    .db   0
   0203 00                   10    .db   0
   0204 02                   11    .db   2
   0205                      92 DefineEntity coin_4_51,          4,  51, SP_COIN_0_W,     SP_COIN_0_H,     0, 0, #coin_anim,       0, 0, 2
   0205                       1 coin_4_51::
   0205 04                    2    .db   4
   0206 33                    3    .db   51
   0207 05                    4    .db   SP_COIN_0_W
   0208 0A                    5    .db   SP_COIN_0_H
   0209 00                    6    .db   0
   020A 00                    7    .db   0
   020B 00 00                 8    .dw   #coin_anim
   020D 00                    9    .db   0
   020E 00                   10    .db   0
   020F 02                   11    .db   2
   0210                      93 DefineEntity coin_44_27,        44,  27, SP_COIN_0_W,     SP_COIN_0_H,     0, 0, #coin_anim,       0, 0, 2
   0210                       1 coin_44_27::
   0210 2C                    2    .db   44
   0211 1B                    3    .db   27
   0212 05                    4    .db   SP_COIN_0_W
   0213 0A                    5    .db   SP_COIN_0_H
   0214 00                    6    .db   0
   0215 00                    7    .db   0
   0216 00 00                 8    .dw   #coin_anim
   0218 00                    9    .db   0
   0219 00                   10    .db   0
   021A 02                   11    .db   2
                             94 
   021B                      95 _ents_lvl0:
   021B 00 00                96     .dw player_4_184
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 37.
Hexadecimal [16-Bits]



   021D CE 01                97     .dw coin_70_180
                             98 
   021F                      99 _ents_lvl1:
   021F 00 00               100     .dw player_4_184;
   0221 CE 01               101     .dw coin_70_180
   0223 4D 00               102     .dw spikes_49_186
                            103 
   0225                     104 _ents_lvl2:
   0225 00 00               105     .dw player_4_184
   0227 CE 01               106     .dw coin_70_180
   0229 D1 00               107     .dw spikes_36_122
   022B 08 01               108     .dw spikes_up_37_144
   022D 29 01               109     .dw spikes_rig_33_130
   022F 97 01               110     .dw spikes_lef_44_128
                            111 
   0231                     112 _ents_lvl3:
   0231 00 00               113     .dw player_4_184
   0233 FA 01               114     .dw coin_16_60
   0235 D1 00               115     .dw spikes_36_122
   0237 F2 00               116     .dw spikes_36_50
   0239 13 01               117     .dw spikes_up_37_72
   023B 08 01               118     .dw spikes_up_37_144
   023D 29 01               119     .dw spikes_rig_33_130
   023F 4A 01               120     .dw spikes_rig_33_58
   0241 97 01               121     .dw spikes_lef_44_128
   0243 B8 01               122     .dw spikes_lef_44_56
                            123 
   0245                     124 _ents_lvl_MT_Studios_UA:
   0245 00 00               125     .dw player_4_184;
   0247 EF 01               126     .dw coin_67_68
   0249 4D 00               127     .dw spikes_49_186
   024B 63 00               128     .dw spikes_59_186
   024D C6 00               129     .dw spikes_61_130
   024F BB 00               130     .dw spikes_12_130
                            131 
                            132 ;_ents_lvl0_Ianixaa:
                            133 ;    .dw player_4_184;
                            134 ;    .dw coin_68_156
                            135 ;    .dw spikes_69_186
                            136 ;    .dw spikes_59_186
                            137 ;    .dw spikes_49_186
                            138 ;    .dw spikes_39_186
                            139 ;    .dw spikes_29_186
                            140 ;    .dw spikes_19_186
                            141 ;    .dw spikes_9_186
                            142 
   0251                     143 _ents_lvl1_Ianixaa:
   0251 00 00               144     .dw player_4_184;
   0253 CE 01               145     .dw coin_70_180
   0255 9A 00               146     .dw spikes_12_170
   0257 B0 00               147     .dw spikes_28_170
   0259 8F 00               148     .dw spikes_41_178
   025B 63 00               149     .dw spikes_59_186
                            150 
   025D                     151 _ents_lvl_Spicyboat_Studios:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 38.
Hexadecimal [16-Bits]



   025D 00 00               152     .dw player_4_184
   025F 10 02               153     .dw coin_44_27
   0261 81 01               154     .dw spikes_lef_12_153
   0263 34 01               155     .dw spikes_rig_13_113
   0265 AD 01               156     .dw spikes_lef_12_73
   0267 60 01               157     .dw spikes_rig_13_33
   0269 6B 01               158     .dw spikes_rig_37_27
   026B 37 00               159     .dw spikes_31_186
   026D 58 00               160     .dw spikes_50_186
   026F 63 00               161     .dw spikes_59_186
                            162 
   0271                     163 _ents_lvl_rnd_project22:
   0271 0B 00               164     .dw player_4_32
   0273 05 02               165     .dw coin_4_51
   0275 16 00               166     .dw spikes_7_186
   0277 2C 00               167     .dw spikes_19_186
   0279 63 00               168     .dw spikes_59_186
   027B 79 00               169     .dw spikes_69_186
   027D 84 00               170     .dw spikes_32_178
   027F 8F 00               171     .dw spikes_41_178
   0281 DC 00               172     .dw spikes_25_90
   0283 E7 00               173     .dw spikes_47_90
   0285 FD 00               174     .dw spikes_16_42
                            175     
   0287                     176 _ents_lvl_Tomateixon:
   0287 00 00               177     .dw player_4_184
   0289 CE 01               178     .dw coin_70_180
   028B A5 00               179     .dw spikes_20_170
   028D 42 00               180     .dw spikes_39_186
   028F 4D 00               181     .dw spikes_49_186
   0291 6E 00               182     .dw spikes_56_186
                            183 
   0293                     184 _ents_last_lvl:
   0293 0B 00               185     .dw player_4_32
   0295 D9 01               186     .dw coin_70_170
   0297 21 00               187     .dw spikes_14_186
   0299 C3 01               188     .dw spikes_lef_12_42
   029B 76 01               189     .dw spikes_rig_21_9
   029D 55 01               190     .dw spikes_rig_21_52
   029F 3F 01               191     .dw spikes_rig_21_102
   02A1 1E 01               192     .dw spikes_rig_21_140
   02A3 A2 01               193     .dw spikes_lef_12_90
   02A5 8C 01               194     .dw spikes_lef_12_138
                            195 
   02A7                     196 DefineLevel lvl0,                 #_intro,                   2, _ents_lvl0
   02A7                       1 lvl0::
   02A7 00 00                 2    .dw  #_intro
   02A9 02                    3    .db  2
   02AA 1B 02                 4    .dw  _ents_lvl0
   02AC                     197 DefineLevel lvl1,                 #_level1,                  2, _ents_lvl0
   02AC                       1 lvl1::
   02AC 00 00                 2    .dw  #_level1
   02AE 02                    3    .db  2
   02AF 1B 02                 4    .dw  _ents_lvl0
   02B1                     198 DefineLevel lvl2,                 #_level1,                  3, _ents_lvl1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 39.
Hexadecimal [16-Bits]



   02B1                       1 lvl2::
   02B1 00 00                 2    .dw  #_level1
   02B3 03                    3    .db  3
   02B4 1F 02                 4    .dw  _ents_lvl1
   02B6                     199 DefineLevel lvl3,                 #_level2,                  6, _ents_lvl2
   02B6                       1 lvl3::
   02B6 00 00                 2    .dw  #_level2
   02B8 06                    3    .db  6
   02B9 25 02                 4    .dw  _ents_lvl2
   02BB                     200 DefineLevel lvl4,                 #_level3,                 10, _ents_lvl3
   02BB                       1 lvl4::
   02BB 00 00                 2    .dw  #_level3
   02BD 0A                    3    .db  10
   02BE 31 02                 4    .dw  _ents_lvl3
   02C0                     201 DefineLevel lvl_MT_Studios_UA,    #_level_MT_Studios_UA,     6, _ents_lvl_MT_Studios_UA
   02C0                       1 lvl_MT_Studios_UA::
   02C0 00 00                 2    .dw  #_level_MT_Studios_UA
   02C2 06                    3    .db  6
   02C3 45 02                 4    .dw  _ents_lvl_MT_Studios_UA
                            202 ;DefineLevel lvl0_Ianixaa,         #_level0_Ianixaa,          9, _ents_lvl0_Ianixaa
   02C5                     203 DefineLevel lvl1_Ianixaa,         #_level1_Ianixaa,          6, _ents_lvl1_Ianixaa
   02C5                       1 lvl1_Ianixaa::
   02C5 00 00                 2    .dw  #_level1_Ianixaa
   02C7 06                    3    .db  6
   02C8 51 02                 4    .dw  _ents_lvl1_Ianixaa
   02CA                     204 DefineLevel lvl_Tomateixon,       #_level_Tomateixon,        6, _ents_lvl_Tomateixon
   02CA                       1 lvl_Tomateixon::
   02CA 00 00                 2    .dw  #_level_Tomateixon
   02CC 06                    3    .db  6
   02CD 87 02                 4    .dw  _ents_lvl_Tomateixon
   02CF                     205 DefineLevel lvl_Spicyboat_Studio, #_level_Spicyboat_Studio, 10, _ents_lvl_Spicyboat_Studios
   02CF                       1 lvl_Spicyboat_Studio::
   02CF 00 00                 2    .dw  #_level_Spicyboat_Studio
   02D1 0A                    3    .db  10
   02D2 5D 02                 4    .dw  _ents_lvl_Spicyboat_Studios
   02D4                     206 DefineLevel lvl_rnd_project22,    #_level_rnd_project22,    11, _ents_lvl_rnd_project22
   02D4                       1 lvl_rnd_project22::
   02D4 00 00                 2    .dw  #_level_rnd_project22
   02D6 0B                    3    .db  11
   02D7 71 02                 4    .dw  _ents_lvl_rnd_project22
   02D9                     207 DefineLevel last_lvl,             #_end,                    10, _ents_last_lvl
   02D9                       1 last_lvl::
   02D9 00 00                 2    .dw  #_end
   02DB 0A                    3    .db  10
   02DC 93 02                 4    .dw  _ents_last_lvl
                            208 
   02DE                     209 _actual_level:              ;;  Posicion de memoria del nivel actual
   02DE E2 02               210     .dw _levels
                            211 
   02E0                     212 _last_level:                ;;  Ultimo nivel del juego
   02E0 D9 02               213     .dw last_lvl
                            214 
   02E2                     215 _levels:                    ;;  Array de niveles del juego
   02E2 A7 02               216     .dw lvl0
   02E4 AC 02               217     .dw lvl1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 40.
Hexadecimal [16-Bits]



   02E6 B1 02               218     .dw lvl2
   02E8 B6 02               219     .dw lvl3
   02EA BB 02               220     .dw lvl4
   02EC C0 02               221     .dw lvl_MT_Studios_UA
   02EE C5 02               222     .dw lvl1_Ianixaa
   02F0 CA 02               223     .dw lvl_Tomateixon
   02F2 CF 02               224     .dw lvl_Spicyboat_Studio
   02F4 D4 02               225     .dw lvl_rnd_project22
   02F6 D9 02               226     .dw last_lvl
                            227 
   02F8                     228 _string_MTStudios:
   02F8 40 4D 54 5F 53 54   229     .asciz "@MT_STUDIOS_UA"
        55 44 49 4F 53 5F
        55 41 00
                            230 
   0307                     231 _string_Ianixaa:
   0307 40 49 41 4E 49 58   232     .asciz "@IANIXAA"
        41 41 00
                            233 
   0310                     234 _string_SpicyboatStudios:
   0310 40 53 50 49 43 59   235     .asciz "@SPICYBOATSTUDIO"
        42 4F 41 54 53 54
        55 44 49 4F 00
                            236 
   0321                     237 _string_rnd_project22:
   0321 40 52 4E 44 5F 50   238     .asciz "@RND_PROJECT22"
        52 4F 4A 45 43 54
        32 32 00
                            239 
   0330                     240 _string_tomateixon:
   0330 40 54 4F 4D 41 54   241     .asciz "@TOMATEIXON"
        45 49 58 4F 4E 00
                            242 
   033C                     243 _string_default:
   033C 00                  244     .asciz ""
                            245 
   033D                     246 _string_intro:
   033D 20 20 20 20 20 20   247     .asciz "        Q = UP      O = LEFT   P = RIGHT"
        20 20 51 20 3D 20
        55 50 20 20 20 20
        20 20 4F 20 3D 20
        4C 45 46 54 20 20
        20 50 20 3D 20 52
        49 47 48 54 00
                            248 
   0366                     249 gameman_init::
   0366 CD 00 00      [17]  250     call  rendersys_init             ;; Inicializar sistema de render
   0369 CD 2F 04      [17]  251     call  gameman_set_entities       ;; Crea las primeras entidades
   036C CD 00 00      [17]  252     call  musicsys_init              ;; Inicializar sonido
   036F C9            [10]  253 ret
                            254 
   0370                     255 gameman_check_end::
   0370 CD B2 03      [17]  256     call gameman_get_actual_level
   0373 2A E0 02      [16]  257     ld      hl,     (_last_level)       ;;  HL = Ultimo nivel del juego
   0376 7D            [ 4]  258     ld      a,      l                   ;;  A = Byte bajo del ultimo nivel del juego
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 41.
Hexadecimal [16-Bits]



   0377 BB            [ 4]  259     cp      e                           ;;  Compara con E
   0378 28 04         [12]  260     jr      z,      restart_game        ;;  Si es el mismo (A-E=0), estoy en el ultimo nivel
   037A CD 82 03      [17]  261     call    gameman_next_level          ;;  Si no, paso al siguiente nivel
   037D C9            [10]  262     ret
   037E                     263     restart_game:
   037E CD 92 03      [17]  264     call    gameman_restart_game        ;;  Vuelvo a empezar desde el primer nivel
   0381 C9            [10]  265 ret
                            266 
   0382                     267 gameman_next_level:
   0382 DD 2A DE 02   [20]  268     ld      ix,     (_actual_level)     ;;  IX = Puntero al nivel actual
   0386 DD 23         [10]  269     inc     ix                          ;;  /
   0388 DD 23         [10]  270     inc     ix                          ;;  \ Incrementa IX 2 veces
   038A DD 22 DE 02   [20]  271     ld      (_actual_level),    ix      ;;  Actualiza al nivel siguiente
   038E CD A8 03      [17]  272     call    gameman_load_level          ;;  Carga el nivel de IX
   0391 C9            [10]  273 ret
                            274 
   0392                     275 gameman_restart_game:
   0392 21 E2 02      [10]  276     ld      hl,     #_levels            ;;  HL = Direccion del array de niveles (primer nivel)
   0395 22 DE 02      [16]  277     ld      (_actual_level),    hl      ;;  Actualizo _actual_level con el primer nivel
   0398 CD A0 03      [17]  278     call    gameman_IX_load_level       ;;  Guardo en IX el nivel actual y lo cargo
   039B C9            [10]  279 ret
                            280 
   039C                     281 gameman_restart_level::
   039C CD A0 03      [17]  282     call    gameman_IX_load_level       ;;  Guardo en IX el nivel actual y lo cargo
   039F C9            [10]  283 ret
                            284 
   03A0                     285 gameman_IX_load_level:
   03A0 DD 2A DE 02   [20]  286     ld      ix,     (_actual_level)     ;;  IX = Puntero al nivel actual
   03A4 CD A8 03      [17]  287     call    gameman_load_level          ;;  Carga el nivel de IX
   03A7 C9            [10]  288 ret
                            289 
                            290 ;;  Input
                            291 ;;  IX = Puntero al nivel que cargar
   03A8                     292 gameman_load_level:
   03A8 CD 00 00      [17]  293     call    entityman_destroy_entities  ;;  Destruye todas las entidades
   03AB CD 00 00      [17]  294     call    rendersys_tilemap           ;;  Carga el siguiente mapa
   03AE CD 2F 04      [17]  295     call    gameman_set_entities        ;;  Crea las entidades del siguiente nivel
   03B1 C9            [10]  296 ret
                            297 
   03B2                     298 gameman_get_actual_level:
   03B2 2A DE 02      [16]  299     ld      hl,     (_actual_level)     ;;  HL = Puntero al nivel actual
   03B5 5E            [ 7]  300     ld      e,      (hl)                ;;  E = Byte bajo del nivel
   03B6 23            [ 6]  301     inc     hl                          ;;  Incremento HL
   03B7 56            [ 7]  302     ld      d,      (hl)                ;;  D = Byte alto del nivel
   03B8 C9            [10]  303 ret
                            304 
   03B9                     305 gameman_get_map::
   03B9 CD B2 03      [17]  306     call    gameman_get_actual_level    ;;  DE = Nivel actual (2 primeros bytes puntero a mapa del nivel)
   03BC EB            [ 4]  307     ex      de,     hl                  ;;  HL = Nivel actual
   03BD 5E            [ 7]  308     ld      e,      (hl)                ;;  E = Byte bajo del mapa
   03BE 23            [ 6]  309     inc     hl                          ;;  Incremento HL
   03BF 56            [ 7]  310     ld      d,      (hl)                ;;  D = Byte alto del mapa
   03C0 C9            [10]  311 ret
                            312 
   03C1                     313 gameman_get_string::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 42.
Hexadecimal [16-Bits]



   03C1 CD B2 03      [17]  314     call    gameman_get_actual_level
   03C4 C3 D8 03      [10]  315     jp      comprueba_MTStudios
   03C7                     316     return_string:
   03C7 21 00 C0      [10]  317     ld  hl,         #0xC000
   03CA FD 21 3C 03   [14]  318     ld  iy,         #_string_default
   03CE C9            [10]  319 ret
                            320 
   03CF                     321 procedimiento_comprueba:
   03CF 21 E2 02      [10]  322     ld      hl,     #_levels
   03D2 06 00         [ 7]  323     ld      b,      #0
   03D4 09            [11]  324     add     hl,     bc
   03D5 7E            [ 7]  325     ld      a,      (hl)
   03D6 BB            [ 4]  326     cp      e
   03D7 C9            [10]  327 ret
                            328 
   03D8                     329 comprueba_MTStudios:
   03D8 0E 0A         [ 7]  330     ld      c,      #lvl_MTStudios_bytes
   03DA CD CF 03      [17]  331     call    procedimiento_comprueba
   03DD CA 1B 04      [10]  332     jp      z,      MTStudios_map
                            333 
   03E0                     334 comprueba_Ianixaa:
   03E0 0E 0C         [ 7]  335     ld      c,      #lvl1_Ianixaa_bytes
   03E2 CD CF 03      [17]  336     call    procedimiento_comprueba
   03E5 CA 11 04      [10]  337     jp      z,      Ianixaa_map
                            338 
   03E8                     339 comprueba_Tomateixon:
   03E8 0E 0E         [ 7]  340     ld      c,      #lvl_Tomateixon_bytes
   03EA CD CF 03      [17]  341     call    procedimiento_comprueba
   03ED CA 16 04      [10]  342     jp      z,      Tomateixon_map
                            343 
   03F0                     344 comprueba_SpicyboatStudios:
   03F0 0E 10         [ 7]  345     ld      c,      #lvl_Spicyboat_Studios_bytes
   03F2 CD CF 03      [17]  346     call    procedimiento_comprueba
   03F5 CA 20 04      [10]  347     jp      z,      SpicyboatStudios_map
                            348     
   03F8                     349 comprueba_RndProject22:
   03F8 0E 12         [ 7]  350     ld      c,      #lvl_rnd_project22_bytes
   03FA CD CF 03      [17]  351     call    procedimiento_comprueba
   03FD CA 25 04      [10]  352     jp      z,      RndProject22_map
   0400 C3 C7 03      [10]  353     jp      return_string
                            354 
   0403                     355 comprueba_intro::
   0403 CD B2 03      [17]  356     call    gameman_get_actual_level
   0406 21 E2 02      [10]  357     ld      hl,     #_levels
   0409 7E            [ 7]  358     ld      a,      (hl)
   040A BB            [ 4]  359     cp      e
   040B CA 2A 04      [10]  360     jp      z,      intro_map
   040E C3 C7 03      [10]  361     jp      return_string
                            362 
   0411                     363 Ianixaa_map:
   0411 FD 21 07 03   [14]  364     ld  iy,         #_string_Ianixaa
   0415 C9            [10]  365 ret
                            366 
   0416                     367 Tomateixon_map:
   0416 FD 21 30 03   [14]  368     ld  iy,         #_string_tomateixon
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 43.
Hexadecimal [16-Bits]



   041A C9            [10]  369 ret
                            370 
   041B                     371 MTStudios_map:
   041B FD 21 F8 02   [14]  372     ld  iy,         #_string_MTStudios
   041F C9            [10]  373 ret
                            374 
   0420                     375 SpicyboatStudios_map:
   0420 FD 21 10 03   [14]  376     ld  iy,         #_string_SpicyboatStudios
   0424 C9            [10]  377 ret
                            378 
   0425                     379 RndProject22_map:
   0425 FD 21 21 03   [14]  380     ld  iy,         #_string_rnd_project22
   0429 C9            [10]  381 ret
                            382 
   042A                     383 intro_map:
   042A FD 21 3D 03   [14]  384     ld  iy,         #_string_intro
   042E C9            [10]  385 ret
                            386 
   042F                     387 gameman_set_entities::
   042F CD B2 03      [17]  388     call    gameman_get_actual_level    ;;  DE = Nivel actual
   0432 EB            [ 4]  389     ex      de,     hl                  ;;  HL = Nivel actual
   0433 01 02 00      [10]  390     ld      bc,     #l_num              ;;  BC = 2 (posicion de _num_ents)
   0436 09            [11]  391     add     hl,     bc                  ;;  Sumo posiciones a HL
   0437 7E            [ 7]  392     ld      a,      (hl)                ;;  A = Numero de entidades
   0438 23            [ 6]  393     inc     hl                          ;;  Incrementa HL
   0439 5E            [ 7]  394     ld      e,      (hl)                ;;  E = Byte bajo lista de entidades
   043A 23            [ 6]  395     inc     hl                          ;;  Incrementa HL
   043B 56            [ 7]  396     ld      d,      (hl)                ;;  D = Byte alto lista de entidades
   043C CD 00 00      [17]  397     call    entityman_create_mulitple   ;;  Crea las entidades de la lista
   043F C9            [10]  398 ret
